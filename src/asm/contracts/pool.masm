use.miden::account
use.std::sys
use.miden::contracts::wallets::basic->wallet

const.ASSET_AMT_OFFSET=3

const.ASSET_IN=0
const.ASSET_OUT=1
const.RECIPIENT_OUT=2
const.TAG_OUT=3
const.PAIR_FAUCETS_SLOT=0

const.ASSET_NOT_IN_PAIR=0
const.ASSET_IS_TOKEN_1=1
const.ASSET_IS_TOKEN_2=2

# Asset is not in pair error
const.ERR_POOL_ASSET_IS_NOT_IN_PAIR=0x00020080
# Asset is not in pair error
const.ERR_SAME_ASSET_IN_AND_OUT=0x00020081

# Inputs: [asset_faucet_id_felt_2, asset_faucet_id_felt_1]
# Outputs: [asset_kind] 0 = NOT_IN_PAIR, 1 = TOKEN_1, 2 = TOKEN_2
proc.find_asset_in_pair
    push.PAIR_FAUCETS_SLOT exec.account::get_item 
    # => [token1_faucet_id_felt_2, token1_faucet_id_felt_1, token2_faucet_id_felt_2, token2_faucet_id_felt_1, asset_faucet_id_felt_2, asset_faucet_id_felt_1]

    dup.4 eq swap dup.5 eq and
    # => [is_asset_is_token1, token2_faucet_id_felt_2, token2_faucet_id_felt_1, asset_faucet_id_felt_2, asset_faucet_id_felt_1]

    if.true
        dropw
        push.ASSET_IS_TOKEN_1
    else
        movup.2 eq swap movup.2 eq and
        if.true
            push.ASSET_IS_TOKEN_2
        else
            push.ASSET_NOT_IN_PAIR
        end
    end
end

# acct proc 0
# export.::miden::contracts::wallets::basic::receive_asset
# Inputs:  [ASSET, pad(12)]
export.receive_asset
    dupw movup.2 drop movup.2 drop swap
    exec.find_asset_in_pair
    neq.0 assert.err=ERR_POOL_ASSET_IS_NOT_IN_PAIR
    # => [ASSET]
    exec.wallet::receive_asset
    push.1
    exec.account::incr_nonce
end

# internal procedure
# inputs: [tokenBalX, tokenBalY, tokenAmountInX]
# outputs: [tokenAmountOutY]
proc.calculate_amount_y_out
    dup.2
    # [dx, x, y, dx]

    movup.2
    # [y, dx, x, dx]

    mul
    div.1000000
    # [dx * y, x, dx]

    swap.2
    # [dx, x, dx * y]

    add
    # [dx + x, dx * y]

    # divide by 1e3 to have some floating point
    div.1000

    # note when dividing...
    # a / b
    # [b, a]
    u32div

end

# acct proc 2

# [ASSET_IN, asset_id_out_felt_2, asset_id_out_felt_1, RECIPIENT, tag]
export.swap
    mem_storew.ASSET_IN 
    dup dup.2 exec.find_asset_in_pair
    neq.0 assert.err=ERR_POOL_ASSET_IS_NOT_IN_PAIR
    dropw
    # => [asset_id_out_felt_2, asset_id_out_felt_1, RECIPIENT, tag]

    push.0.0 movup.3 movup.3 mem_storew.ASSET_OUT 
    dup dup.2 exec.find_asset_in_pair
    neq.0 assert.err=ERR_POOL_ASSET_IS_NOT_IN_PAIR
    dropw
    # => [RECIPIENT, tag]

    mem_storew.RECIPIENT_OUT dropw
    # => [tag]

    mem_storew.TAG_OUT
    # => []
    
    exec.sys::truncate_stack

    padw mem_loadw.ASSET_IN movup.2 drop movup.2 drop swap
    exec.find_asset_in_pair
    padw mem_loadw.ASSET_OUT movup.2 drop movup.2 drop swap
    exec.find_asset_in_pair
    neq assert.err=ERR_SAME_ASSET_IN_AND_OUT

    mem_load.ASSET_IN
    # => [amt_in_x]

    padw mem_loadw.ASSET_OUT movup.2 drop movup.2 drop
    # => [faucet_id_Y_felt_2, faucet_id_Y_felt_1, amt_in_x]

    call.account::get_balance
    
    # => [amt_Y, amt_in_x]

    padw mem_loadw.ASSET_IN movup.2 drop movup.2 drop
    # => [faucet_id_X_felt_2, faucet_id_X_felt_1, amt_Y, amt_in_x]

    call.account::get_balance
    # => [amt_X, amt_Y, amt_in_x]

    padw mem_loadw.ASSET_IN
    # [ASSET_IN, amt_X, amt_Y, amt_in_x]

    exec.wallet::receive_asset
    movup.2 drop

    # stack
    # ├──  0: tokenB balance
    # ├──  1: tokenA balance

    mul.1000
    swap
    mul.1000
    swap

    # stack
    # ├──  0: tokenB balance scaled 1e3
    # ├──  1: tokenA balance scaled 1e3

    # load amount in X
    padw mem_loadw.ASSET_IN drop drop drop

    mul.1000
    swap.2

    exec.calculate_amount_y_out

    padw mem_loadw.ASSET_OUT
    movup.3 drop
    mem_storew.ASSET_OUT dropw drop

    padw padw
    padw mem_loadw.RECIPIENT_OUT # RECIPIENT
    push.0 # execution_hint
    push.2 # note_type
    push.0 # aux
    padw mem_loadw.TAG_OUT movdn.3 drop drop drop # tag

    # => [tag, aux, note_type, execution_hint, RECIPIENT, pad(8)]
    exec.wallet::create_note
    # => [note_idx, pad(15)]

    padw mem_loadw.ASSET_OUT
    # => [ASSET_OUT, note_idx, pad(15)]
    exec.wallet::move_asset_to_note

    push.1
    exec.account::incr_nonce

    dropw dropw dropw dropw

    exec.sys::truncate_stack
end